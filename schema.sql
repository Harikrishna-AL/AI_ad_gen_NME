
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pg_net" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE OR REPLACE FUNCTION "public"."check_api_key_and_credits"("api_key_arg" "text", "task_id_arg" "text") RETURNS TABLE("should_process" boolean)
    LANGUAGE "plpgsql"
    AS $_$
DECLARE
  credits_var INT;
  user_id_var text;
BEGIN
  -- Check if the user has a job running
  EXECUTE FORMAT('SELECT user_id FROM %I WHERE api_hash = $1', 'APIKeys')
  INTO user_id_var
  USING api_key_arg;

  IF user_id_var IS not null THEN
    -- Create Task
    INSERT INTO "APIRequests" (user_id, task_id) VALUES (user_id_var, task_id_arg);

    -- Get credits
    EXECUTE FORMAT('SELECT credits FROM %I WHERE user_id = $1', 'APICredits')
    INTO credits_var
    USING user_id_var;

    -- Update APICredits
    EXECUTE FORMAT('UPDATE %I SET credits = $1 + 1 WHERE user_id = $2', 'APICredits')
    USING credits_var, user_id_var;
  END IF;

  -- Return credits and job_running in a single record with field names
  RETURN QUERY SELECT user_id_var is not null;
END;
$_$;

ALTER FUNCTION "public"."check_api_key_and_credits"("api_key_arg" "text", "task_id_arg" "text") OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
begin
  INSERT INTO public.profiles (id, email)
  values (new.id, new.email)
  ON CONFLICT (id) 
  DO 
    UPDATE SET email = new.email;
  return new;
end;
$$;

ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."regenerate_add_to_gallery"("image_urls_arg" "text"[], "user_id_arg" "uuid", "project_id_arg" "uuid") RETURNS "void"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  UPDATE public_images
  SET is_regenerated = false
  WHERE modified_image_url = ANY(image_urls_arg)
  AND user_id = user_id_arg
  AND project_id = project_id_arg;
END;
$$;

ALTER FUNCTION "public"."regenerate_add_to_gallery"("image_urls_arg" "text"[], "user_id_arg" "uuid", "project_id_arg" "uuid") OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."APICredits" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "text" NOT NULL,
    "credits" bigint DEFAULT '0'::bigint NOT NULL
);

ALTER TABLE "public"."APICredits" OWNER TO "postgres";

ALTER TABLE "public"."APICredits" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."APICredits_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."APIKeys" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "text" NOT NULL,
    "api_hash" "text" NOT NULL
);

ALTER TABLE "public"."APIKeys" OWNER TO "postgres";

ALTER TABLE "public"."APIKeys" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."APIKeys_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."APIRequests" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "text" NOT NULL,
    "task_id" "text" NOT NULL,
    "result" "text"[]
);

ALTER TABLE "public"."APIRequests" OWNER TO "postgres";

ALTER TABLE "public"."APIRequests" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."APIRequests_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."backgroundremovedimages" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid" NOT NULL,
    "project_id" "uuid",
    "image_url" "text" NOT NULL,
    "caption" "text",
    "type" "text" DEFAULT 'image'::"text" NOT NULL,
    CONSTRAINT "backgroundremovedimages_caption_check" CHECK (("length"("caption") < 100))
);

ALTER TABLE "public"."backgroundremovedimages" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."brand_assets" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid" NOT NULL,
    "image_url" "text" NOT NULL
);

ALTER TABLE "public"."brand_assets" OWNER TO "postgres";

ALTER TABLE "public"."brand_assets" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."brand_assets_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "id" "uuid" NOT NULL,
    "email" "text"
);

ALTER TABLE "public"."profiles" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."projects" (
    "project_id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "previewImage" "text",
    "canvasHistory" "jsonb",
    "title" "text",
    "recently" "jsonb"[],
    "user_id" "uuid" NOT NULL
);

ALTER TABLE "public"."projects" OWNER TO "postgres";

ALTER TABLE "public"."backgroundremovedimages" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."projects_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."public_images" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "image_url" "text" NOT NULL,
    "modified_image_url" "text" NOT NULL,
    "prompt" "text" NOT NULL,
    "user_id" "uuid",
    "task_id" "text" NOT NULL,
    "caption" "text",
    "is_3d" boolean DEFAULT false,
    "is_quick" boolean DEFAULT false,
    "project_id" "uuid" DEFAULT "auth"."uid"(),
    "is_regenerated" boolean DEFAULT false
);

ALTER TABLE "public"."public_images" OWNER TO "postgres";

ALTER TABLE "public"."public_images" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."public_images_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."APICredits"
    ADD CONSTRAINT "APICredits_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."APICredits"
    ADD CONSTRAINT "APICredits_user_id_key" UNIQUE ("user_id");

ALTER TABLE ONLY "public"."APIKeys"
    ADD CONSTRAINT "APIKeys_api_hash_key" UNIQUE ("api_hash");

ALTER TABLE ONLY "public"."APIKeys"
    ADD CONSTRAINT "APIKeys_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."APIKeys"
    ADD CONSTRAINT "APIKeys_user_id_key" UNIQUE ("user_id");

ALTER TABLE ONLY "public"."APIRequests"
    ADD CONSTRAINT "APIRequests_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."APIRequests"
    ADD CONSTRAINT "APIRequests_task_id_key" UNIQUE ("task_id");

ALTER TABLE ONLY "public"."brand_assets"
    ADD CONSTRAINT "brand_assets_image_url_key" UNIQUE ("image_url");

ALTER TABLE ONLY "public"."brand_assets"
    ADD CONSTRAINT "brand_assets_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."backgroundremovedimages"
    ADD CONSTRAINT "projects_image_url_key" UNIQUE ("image_url");

ALTER TABLE ONLY "public"."backgroundremovedimages"
    ADD CONSTRAINT "projects_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."projects"
    ADD CONSTRAINT "projects_pkey1" PRIMARY KEY ("project_id");

ALTER TABLE ONLY "public"."projects"
    ADD CONSTRAINT "projects_project_id_key" UNIQUE ("project_id");

ALTER TABLE ONLY "public"."public_images"
    ADD CONSTRAINT "public_images_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."APIKeys"
    ADD CONSTRAINT "APIKeys_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."APICredits"("user_id");

ALTER TABLE ONLY "public"."APIRequests"
    ADD CONSTRAINT "APIRequests_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."APICredits"("user_id");

ALTER TABLE ONLY "public"."backgroundremovedimages"
    ADD CONSTRAINT "backgroundremovedimages_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."brand_assets"
    ADD CONSTRAINT "brand_assets_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."projects"
    ADD CONSTRAINT "projects_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."public_images"
    ADD CONSTRAINT "public_images_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE "public"."APICredits" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."APIKeys" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."APIRequests" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "Enable read access for all users" ON "public"."brand_assets" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."public_images" FOR SELECT USING (true);

CREATE POLICY "Public profiles are viewable by everyone." ON "public"."profiles" FOR SELECT USING (true);

CREATE POLICY "Users can insert their own profile." ON "public"."profiles" FOR INSERT WITH CHECK (("auth"."uid"() = "id"));

CREATE POLICY "Users can update own profile." ON "public"."profiles" FOR UPDATE USING (("auth"."uid"() = "id"));

ALTER TABLE "public"."backgroundremovedimages" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."brand_assets" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."projects" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."public_images" ENABLE ROW LEVEL SECURITY;

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."check_api_key_and_credits"("api_key_arg" "text", "task_id_arg" "text") TO "anon";
GRANT ALL ON FUNCTION "public"."check_api_key_and_credits"("api_key_arg" "text", "task_id_arg" "text") TO "authenticated";
GRANT ALL ON FUNCTION "public"."check_api_key_and_credits"("api_key_arg" "text", "task_id_arg" "text") TO "service_role";

GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";

GRANT ALL ON FUNCTION "public"."regenerate_add_to_gallery"("image_urls_arg" "text"[], "user_id_arg" "uuid", "project_id_arg" "uuid") TO "anon";
GRANT ALL ON FUNCTION "public"."regenerate_add_to_gallery"("image_urls_arg" "text"[], "user_id_arg" "uuid", "project_id_arg" "uuid") TO "authenticated";
GRANT ALL ON FUNCTION "public"."regenerate_add_to_gallery"("image_urls_arg" "text"[], "user_id_arg" "uuid", "project_id_arg" "uuid") TO "service_role";

GRANT ALL ON TABLE "public"."APICredits" TO "anon";
GRANT ALL ON TABLE "public"."APICredits" TO "authenticated";
GRANT ALL ON TABLE "public"."APICredits" TO "service_role";

GRANT ALL ON SEQUENCE "public"."APICredits_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."APICredits_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."APICredits_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."APIKeys" TO "anon";
GRANT ALL ON TABLE "public"."APIKeys" TO "authenticated";
GRANT ALL ON TABLE "public"."APIKeys" TO "service_role";

GRANT ALL ON SEQUENCE "public"."APIKeys_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."APIKeys_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."APIKeys_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."APIRequests" TO "anon";
GRANT ALL ON TABLE "public"."APIRequests" TO "authenticated";
GRANT ALL ON TABLE "public"."APIRequests" TO "service_role";

GRANT ALL ON SEQUENCE "public"."APIRequests_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."APIRequests_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."APIRequests_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."backgroundremovedimages" TO "anon";
GRANT ALL ON TABLE "public"."backgroundremovedimages" TO "authenticated";
GRANT ALL ON TABLE "public"."backgroundremovedimages" TO "service_role";

GRANT ALL ON TABLE "public"."brand_assets" TO "anon";
GRANT ALL ON TABLE "public"."brand_assets" TO "authenticated";
GRANT ALL ON TABLE "public"."brand_assets" TO "service_role";

GRANT ALL ON SEQUENCE "public"."brand_assets_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."brand_assets_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."brand_assets_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";

GRANT ALL ON TABLE "public"."projects" TO "anon";
GRANT ALL ON TABLE "public"."projects" TO "authenticated";
GRANT ALL ON TABLE "public"."projects" TO "service_role";

GRANT ALL ON SEQUENCE "public"."projects_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."projects_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."projects_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."public_images" TO "anon";
GRANT ALL ON TABLE "public"."public_images" TO "authenticated";
GRANT ALL ON TABLE "public"."public_images" TO "service_role";

GRANT ALL ON SEQUENCE "public"."public_images_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."public_images_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."public_images_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
